spring:
  datasource:
    # 数据源
    # &allowMultiQueries=true  允许<delete>中多条删除
    url: jdbc:mysql://127.0.0.1:3306/test?useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&allowMultiQueries=true
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: root

    type: com.alibaba.druid.pool.DruidDataSource

    druid:
      #引用上面的JDBC配置
      url: ${spring.datasource.url}
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
      driver-class-name: ${spring.datasource.driver-class-name}
      #配置初始化连接数大小
      initial-size: 10
      # 最大连接数
      max-active: 50
      #最小连接数
      min-idle: 10
      #获取连接等待超时时间
      max-wait: 5000
      pool-prepared-statements: true #是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
      max-pool-prepared-statement-per-connection-size: 20
      validation-query: SELECT 1 FROM DUAL
      validation-query-timeout: 20000
      test-on-borrow: false #申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-return: false #归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-while-idle: true #建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      time-between-eviction-runs-millis: 60000 #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      min-evictable-idle-time-millis: 300000  #一个连接在池中最小生存的时间，单位是毫秒
      # StatViewServlet配置。（因为暴露的监控信息比较敏感，支持密码加密和访问ip限定）
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        #可以增加访问账号密码【去掉注释就可以】
        #login-username: admin
        #login-password: admin
      filter:  # 过滤器
        stat:
          log-slow-sql: true
          slow-sql-millis: 1000
          merge-sql: true
        wall:
          config:
            multi-statement-allow: true



  # 环境 dev|test|prod
  profiles:
    active: dev
  # jackson时间格式化
  jackson:
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
      enabled: true
  # 下面两个配置是为了handlerException可以捕获404
  mvc:
    # springboot的mvn机制默认对于找不到handler，即找不到路径处理controller的方法时会使用404错误交给servlet默认处理
    # 设置为true让其抛出异常，自定义全局异常才能捕获
    throw-exception-if-no-handler-found: true
  resources:
    # 不要开启默认的静态资源处理机制，而是使用自定义的静态资源处理的 resource handler
    # 如果要用到静态资源，需要手动添加静态资源处理的handler
    add-mappings: false

logging:
  level:
    root: info
    com.hpw.server.slot.mapper: trace
  pattern:
    console: '%p%m%n'

mybatis:
  type-aliases-package: com.nekosighed.myim.pojo.dao  # 扫描的model类
  configuration:
    default-fetch-size: 100
    default-statement-timeout: 3000
    map-underscore-to-camel-case: true  # mapper中的下划线和pojo的驼峰对应
  mapper-locations: classpath:com/nekosighed/myim/dao/*.xml  # mapper的xml文件位置

